/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SearchHistory } from "./SearchHistory";
import { SearchHistoryCountArgs } from "./SearchHistoryCountArgs";
import { SearchHistoryFindManyArgs } from "./SearchHistoryFindManyArgs";
import { SearchHistoryFindUniqueArgs } from "./SearchHistoryFindUniqueArgs";
import { CreateSearchHistoryArgs } from "./CreateSearchHistoryArgs";
import { UpdateSearchHistoryArgs } from "./UpdateSearchHistoryArgs";
import { DeleteSearchHistoryArgs } from "./DeleteSearchHistoryArgs";
import { SearchHistoryService } from "../searchHistory.service";
@graphql.Resolver(() => SearchHistory)
export class SearchHistoryResolverBase {
  constructor(protected readonly service: SearchHistoryService) {}

  async _searchHistoriesMeta(
    @graphql.Args() args: SearchHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SearchHistory])
  async searchHistories(
    @graphql.Args() args: SearchHistoryFindManyArgs
  ): Promise<SearchHistory[]> {
    return this.service.searchHistories(args);
  }

  @graphql.Query(() => SearchHistory, { nullable: true })
  async searchHistory(
    @graphql.Args() args: SearchHistoryFindUniqueArgs
  ): Promise<SearchHistory | null> {
    const result = await this.service.searchHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SearchHistory)
  async createSearchHistory(
    @graphql.Args() args: CreateSearchHistoryArgs
  ): Promise<SearchHistory> {
    return await this.service.createSearchHistory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SearchHistory)
  async updateSearchHistory(
    @graphql.Args() args: UpdateSearchHistoryArgs
  ): Promise<SearchHistory | null> {
    try {
      return await this.service.updateSearchHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SearchHistory)
  async deleteSearchHistory(
    @graphql.Args() args: DeleteSearchHistoryArgs
  ): Promise<SearchHistory | null> {
    try {
      return await this.service.deleteSearchHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
