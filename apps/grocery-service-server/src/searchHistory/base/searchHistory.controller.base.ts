/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SearchHistoryService } from "../searchHistory.service";
import { SearchHistoryCreateInput } from "./SearchHistoryCreateInput";
import { SearchHistory } from "./SearchHistory";
import { SearchHistoryFindManyArgs } from "./SearchHistoryFindManyArgs";
import { SearchHistoryWhereUniqueInput } from "./SearchHistoryWhereUniqueInput";
import { SearchHistoryUpdateInput } from "./SearchHistoryUpdateInput";

export class SearchHistoryControllerBase {
  constructor(protected readonly service: SearchHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SearchHistory })
  @swagger.ApiBody({
    type: SearchHistoryCreateInput,
  })
  async createSearchHistory(
    @common.Body() data: SearchHistoryCreateInput
  ): Promise<SearchHistory> {
    return await this.service.createSearchHistory({
      data: data,
      select: {
        brand: true,
        createdAt: true,
        id: true,
        productName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SearchHistory] })
  @ApiNestedQuery(SearchHistoryFindManyArgs)
  async searchHistories(
    @common.Req() request: Request
  ): Promise<SearchHistory[]> {
    const args = plainToClass(SearchHistoryFindManyArgs, request.query);
    return this.service.searchHistories({
      ...args,
      select: {
        brand: true,
        createdAt: true,
        id: true,
        productName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SearchHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async searchHistory(
    @common.Param() params: SearchHistoryWhereUniqueInput
  ): Promise<SearchHistory | null> {
    const result = await this.service.searchHistory({
      where: params,
      select: {
        brand: true,
        createdAt: true,
        id: true,
        productName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SearchHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: SearchHistoryUpdateInput,
  })
  async updateSearchHistory(
    @common.Param() params: SearchHistoryWhereUniqueInput,
    @common.Body() data: SearchHistoryUpdateInput
  ): Promise<SearchHistory | null> {
    try {
      return await this.service.updateSearchHistory({
        where: params,
        data: data,
        select: {
          brand: true,
          createdAt: true,
          id: true,
          productName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SearchHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSearchHistory(
    @common.Param() params: SearchHistoryWhereUniqueInput
  ): Promise<SearchHistory | null> {
    try {
      return await this.service.deleteSearchHistory({
        where: params,
        select: {
          brand: true,
          createdAt: true,
          id: true,
          productName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
